0/1 Knampsack problem without memoization.

#include<iostream>
using namespace std;
int Knapsack(int* weigth, int* profit, int n, int w,int**t)
{
	if (n == 0 || w == 0)
	{
		t[n][w] = 0;
		return 0;
	}
	if (t[n][w] != -1)
	{
		return t[n][w];
	}

		
		if (weigth[n - 1] <= w)
		{
			int pi, pe;
			pi = profit[n - 1] + Knapsack(weigth, profit, n - 1, w - weigth[n - 1],t);
			pe= 0+Knapsack(weigth, profit, n - 1, w,t);
			t[n][w] = max(pi, pe);
			return t[n][w];
		}
		else
		{
			t[n][w] = 0 + Knapsack(weigth, profit, n - 1, w,t);
			return t[n][w];
		}
	}
int main()
{
    int n, * weight, * profit, w;
    int maxprofit;

    cout << "Enter number of elements: ";
    cin >> n;

    weight = new int[n];
    profit = new int[n];

    for (int i = 0; i < n; i++)
    {
        cout << "Enter weight " ;
        cin >> weight[i];
        cout << "Enter profit " ;
        cin >> profit[i];
    }

    cout << "Enter capacity: ";
    cin >> w;


    int** t = new int* [n + 1];
    for (int i = 0; i <= n; i++)
    {
        t[i] = new int[w + 1];
    }

    for (int i = 0; i <= n; i++)
    {
        for (int j = 0; j <= w; j++)
        {
            t[i][j] = -1;
        }
    }

    maxprofit = Knapsack(weight, profit, n, w, t);

    cout << "MaxProfit: " << maxprofit << endl;

    for (int i = 0; i <= n; i++)
    {
        for (int j = 0; j <= w; j++)
        {
           cout<< t[i][j]<<" ";
        }
        cout << "\n";
    }
}
OUTPUT
Enter number of elements: 3
Enter weight 5
Enter profit 3
Enter weight 4
Enter profit 5
Enter weight 3
Enter profit 4
Enter capacity: 7
MaxProfit: 9
-1 -1 0 0 0 -1 -1 0
0 -1 -1 0 0 -1 -1 3
-1 -1 -1 -1 5 -1 -1 5
-1 -1 -1 -1 -1 -1 -1 9
